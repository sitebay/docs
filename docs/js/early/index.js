(() => {
  // ns-hugo:/home/bitnami/dev/official/docs/_vendor/github.com/sitebay/sitebay-docs-theme/assets/js/main/helpers/helpers.js
  function scrollToActiveExplorerNode() {
    const id = "explorer";
    if (window.scrollHandledByClick && window.scrollHandledByClick[id]) {
      delete window.scrollHandledByClick[id];
      return;
    }
    let explorer = document.getElementById(id);
    if (!explorer) {
      return;
    }
    let retries = [0, 500, 1e3, 2e3];
    let isDone = false;
    for (let i = 0; i < retries.length; i++) {
      if (isDone) {
        return;
      }
      let sleep = retries[i];
      setTimeout(function() {
        if (isDone) {
          return;
        }
        let target = document.querySelector(".explorer--active .is-active-page");
        if (!target) {
          let explorerNodes = document.querySelectorAll(".explorer--active .explorer-node-open:last-child");
          if (explorerNodes.length > 0) {
            target = explorerNodes[explorerNodes.length - 1];
          }
        }
        if (!target) {
          return;
        }
        let offset = getOffsetTop(explorer, target);
        if (!offset) {
          return;
        }
        isDone = true;
        explorer.scroll({ top: offset - 20, behavior: "smooth" });
      }, sleep);
    }
  }
  function getOffsetTop(container, el) {
    let offset = 0;
    while (el && el != container) {
      offset += el.offsetTop;
      el = el.offsetParent;
    }
    return offset;
  }
  var month = 30 * 24 * 60 * 60 * 1e3;

  // <stdin>
  (function() {
    scrollToActiveExplorerNode();
  })();
})();
//# sourceMappingURL=data:application/json;base64,
